// <auto-generated />
using System;
using Ats.Build;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ats.Build.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    partial class AppIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ats.Domain.Account.Models.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("jobtitles");
                });

            modelBuilder.Entity("Ats.Domain.Account.Models.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("occupations");
                });

            modelBuilder.Entity("Ats.Domain.Accounts.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdditionalAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonalIdRegisterPlace")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PersonalIdRegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileType")
                        .HasColumnType("int");

                    b.Property<string>("TimezoneCode")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YOB")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalAddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("Ats.Domain.Accounts.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("Ats.Domain.Accounts.Models.TeamUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeamRole")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("teamusers");
                });

            modelBuilder.Entity("Ats.Domain.Accounts.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Action")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransType")
                        .HasColumnType("int");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Ats.Domain.Accounts.Models.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalletName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("wallets");
                });

            modelBuilder.Entity("Ats.Domain.Address.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Iso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iso3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("NumCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("Ats.Domain.Address.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ProvinceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("Ats.Domain.Address.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Ats.Domain.Address.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ProvinceCode")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.ToTable("provinces");
                });

            modelBuilder.Entity("Ats.Domain.Brand.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ActiveEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("Ats.Domain.Campaign.Models.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AfterEffectiveDay")
                        .HasColumnType("int");

                    b.Property<int>("AfterReceptionDay")
                        .HasColumnType("int");

                    b.Property<double>("BonusPoint")
                        .HasColumnType("float");

                    b.Property<string>("CampaignName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampaignType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EffectiveDateBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailChannel")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MemberRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MemberType")
                        .HasColumnType("int");

                    b.Property<bool>("PandaLoyaltyChannel")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RewardRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RewardType")
                        .HasColumnType("int");

                    b.Property<bool>("SmsChannel")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TermAndConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("TotalMember")
                        .HasColumnType("int");

                    b.Property<bool>("ValidityPeriodType")
                        .HasColumnType("bit");

                    b.Property<bool>("ZaloChannel")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CouponId");

                    b.ToTable("campaigns");
                });

            modelBuilder.Entity("Ats.Domain.Channel.Models.MemberChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ActiveEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChannelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("memberchannels");
                });

            modelBuilder.Entity("Ats.Domain.Claims.Models.Claims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("claims");
                });

            modelBuilder.Entity("Ats.Domain.Coupon.Models.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AfterEffectiveDay")
                        .HasColumnType("int");

                    b.Property<int>("AfterReceptionDay")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("CouponCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CouponName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CouponType")
                        .HasColumnType("bit");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EffectiveDateBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinimumPurchase")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TermAndConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ValidityPeriodType")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CouponCategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("coupons");
                });

            modelBuilder.Entity("Ats.Domain.Coupon.Models.CouponCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CouponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CouponName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("couponcategories");
                });

            modelBuilder.Entity("Ats.Domain.Coupon.Models.CouponRedemption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("CouponAmount")
                        .HasColumnType("float");

                    b.Property<double>("CouponDiscount")
                        .HasColumnType("float");

                    b.Property<bool>("CouponType")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemberCouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<double>("TransAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TransDiscount")
                        .HasColumnType("float");

                    b.Property<string>("TransInvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("MemberCouponId");

                    b.HasIndex("StoreId");

                    b.ToTable("couponredemptions");
                });

            modelBuilder.Entity("Ats.Domain.Coupon.Models.MemberCoupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("EarningRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PointRedemption")
                        .HasColumnType("float");

                    b.Property<string>("RedeemedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RedeemedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("MemberId");

                    b.ToTable("membercoupons");
                });

            modelBuilder.Entity("Ats.Domain.Departments.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Ats.Domain.Departments.Models.DepartmentUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("departmentusers");
                });

            modelBuilder.Entity("Ats.Domain.Gift.Models.Gift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AfterEffectiveDay")
                        .HasColumnType("int");

                    b.Property<int>("AfterReceptionDay")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("AvailableStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EffectiveDateBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GiftCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("GiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GiftName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GiftType")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberRedeemed")
                        .HasColumnType("int");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<double>("RetailMarketPrice")
                        .HasColumnType("float");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockAdjustment")
                        .HasColumnType("int");

                    b.Property<string>("TermAndConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalMember")
                        .HasColumnType("int");

                    b.Property<bool>("ValidityPeriodType")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("GiftCategoryId");

                    b.ToTable("gifts");
                });

            modelBuilder.Entity("Ats.Domain.Gift.Models.GiftCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GiftName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("giftcategories");
                });

            modelBuilder.Entity("Ats.Domain.Gift.Models.MemberGift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EarningRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PointRedemption")
                        .HasColumnType("float");

                    b.Property<string>("RedeemedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RedeemedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GiftId");

                    b.HasIndex("MemberId");

                    b.ToTable("membergifts");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("rolegroups");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.GroupRole", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("grouproles");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("roleclaims");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimezoneCode")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userclaims");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.UserGroup", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("usergroups");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.UserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("userlogins");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("userroles");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("usertokens");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentType")
                        .HasColumnType("int");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("LeadId");

                    b.HasIndex("UserId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.Debt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("debts");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LoanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("LeadId");

                    b.HasIndex("LoanId");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<double?>("SalaryFrom")
                        .HasColumnType("float");

                    b.Property<double?>("SalaryTo")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("LeadId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("incomes");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.IncomeAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("incomeamounts");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.IncomeStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("incomestreams");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("BankAccount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElectricityBill")
                        .HasColumnType("int");

                    b.Property<int?>("HealthInsurance")
                        .HasColumnType("int");

                    b.Property<int?>("IncomeAmountId")
                        .HasColumnType("int");

                    b.Property<int?>("IncomeReceivedMethod")
                        .HasColumnType("int");

                    b.Property<int?>("IncomeStreamId")
                        .HasColumnType("int");

                    b.Property<int?>("InternetBill")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<int?>("LeadAccessLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("LeadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<int?>("LeadLevel")
                        .HasColumnType("int");

                    b.Property<int?>("LeadSource")
                        .HasColumnType("int");

                    b.Property<int?>("LeadStatus")
                        .HasColumnType("int");

                    b.Property<int?>("LifeInsurance")
                        .HasColumnType("int");

                    b.Property<int?>("LoanPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("LoanProductId")
                        .HasColumnType("int");

                    b.Property<int?>("LoanPurpose")
                        .HasColumnType("int");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<double>("MonthlyIncome")
                        .HasColumnType("float");

                    b.Property<int?>("OccupationId")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OriginalFileAdditionId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalFileId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegisterNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SimCard")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleRegistrationCertificate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncomeAmountId");

                    b.HasIndex("IncomeStreamId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("LeadId")
                        .IsUnique();

                    b.HasIndex("LoanProductId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("OrgId");

                    b.HasIndex("OriginalFileAdditionId");

                    b.HasIndex("OriginalFileId");

                    b.HasIndex("ProfileId")
                        .IsUnique()
                        .HasFilter("[ProfileId] IS NOT NULL");

                    b.ToTable("leads");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadAccessLevelHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeadAccessLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("UserId");

                    b.ToTable("leadaccesslevelhistories");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadExchangeRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LeadLevel")
                        .HasColumnType("int");

                    b.Property<string>("Product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("ToBank")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("leadexchangerequests");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadLevelHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LeadLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("leadlevelhistories");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LeadStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("UserId");

                    b.ToTable("leadstatushistories");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OwnershipType")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("TeamId");

                    b.ToTable("leadteams");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OwnershipType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("UserId");

                    b.ToTable("leadusers");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LoanApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("loanapplications");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LoanBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BookDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookType")
                        .HasColumnType("int");

                    b.Property<Guid?>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LoanProductId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("LeadId");

                    b.HasIndex("LoanProductId");

                    b.HasIndex("UserId");

                    b.ToTable("loanbooks");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LoanNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("loannotes");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LoanPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("loanpackages");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.OriginalFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("originalfiles");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.OriginalFileAddition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("originalfileadditions");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LoanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("LoanId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("assets");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.AssetAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssetPropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetPropertyId");

                    b.ToTable("assetattributes");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.AssetLoan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LoanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("LoanId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("assetloans");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.AssetProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.ToTable("assetproperties");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("assettypes");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.Borrower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("BankAccount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowerDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BorrowerId")
                        .HasColumnType("int");

                    b.Property<int?>("BorrowerSource")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElectricityBill")
                        .HasColumnType("int");

                    b.Property<int?>("HealthInsurance")
                        .HasColumnType("int");

                    b.Property<int?>("IncomeReceivedMethod")
                        .HasColumnType("int");

                    b.Property<int?>("InternetBill")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<int?>("LifeInsurance")
                        .HasColumnType("int");

                    b.Property<int?>("LoanPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("LoanProductId")
                        .HasColumnType("int");

                    b.Property<int?>("LoanPurpose")
                        .HasColumnType("int");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<double>("MonthlyIncome")
                        .HasColumnType("float");

                    b.Property<int?>("OccupationId")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OriginalFileAdditionId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalFileId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegisterNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SimCard")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleRegistrationCertificate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("LoanProductId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("OrgId");

                    b.HasIndex("OriginalFileAdditionId");

                    b.HasIndex("OriginalFileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("borrowers");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.BorrowerAccessLevelHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BorrowerAccessLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("UserId");

                    b.ToTable("borroweraccesslevelhistories");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.BorrowerLevelHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BorrowerLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.ToTable("borrowerlevelhistories");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.BorrowerStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BorrowerStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("UserId");

                    b.ToTable("borrowerstatushistories");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LenderId")
                        .HasColumnType("int");

                    b.Property<double>("LoanPeriod")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("LenderId");

                    b.HasIndex("ProductId");

                    b.ToTable("loans");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.LoanProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("MaxAmount")
                        .HasColumnType("float");

                    b.Property<double>("MinAmount")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("loanproducts");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.LoanProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPropertyId");

                    b.ToTable("loanproductattributes");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.LoanProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("loanproductcats");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.LoanProductProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("loanproductproperties");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.LoyaltyPointRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BonusType")
                        .HasColumnType("bit");

                    b.Property<double>("EarningRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<double>("RedemptionRate")
                        .HasColumnType("float");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("loyaltypointrules");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.LoyaltyPointSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<double>("EarningRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<double>("LimitEarnPointPerDay")
                        .HasColumnType("float");

                    b.Property<double>("LimitRedeemedPointPerDay")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PointEarn")
                        .HasColumnType("float");

                    b.Property<double>("PointExpiryMonth")
                        .HasColumnType("float");

                    b.Property<DateTime>("PointExpiryOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PointExpiryRule")
                        .HasColumnType("int");

                    b.Property<double>("PointRedemption")
                        .HasColumnType("float");

                    b.Property<double>("RedeemedRate")
                        .HasColumnType("float");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("loyaltypointsetting");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.LoyaltyTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DowngradePoint")
                        .HasColumnType("float");

                    b.Property<double>("PointMax")
                        .HasColumnType("float");

                    b.Property<double>("PointMin")
                        .HasColumnType("float");

                    b.Property<int>("TierLevel")
                        .HasColumnType("int");

                    b.Property<string>("TierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UpgradePoint")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("loyaltytiers");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.MemberLoyaltyTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActiveEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DowngradePoint")
                        .HasColumnType("float");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Tier")
                        .HasColumnType("int");

                    b.Property<double>("UpgradePoint")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("Tier");

                    b.ToTable("memberloyaltytiers");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.PointRuleBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EarningRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LoyaltyPointRuleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PointRedemption")
                        .HasColumnType("float");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("LoyaltyPointRuleId");

                    b.ToTable("pointrulebrands");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.PointRuleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LoyaltyPointRuleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProductCateId")
                        .HasColumnType("int");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LoyaltyPointRuleId");

                    b.HasIndex("ProductCateId");

                    b.ToTable("pointrulecategories");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.PointRuleChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<double>("EarningRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LoyaltyPointRuleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PointRedemption")
                        .HasColumnType("float");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("LoyaltyPointRuleId");

                    b.ToTable("pointrulechannels");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.PointRuleProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EarningRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LoyaltyPointRuleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PointRedemption")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LoyaltyPointRuleId");

                    b.HasIndex("ProductId");

                    b.ToTable("pointruleproducts");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.PointRuleStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EarningRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LoyaltyPointRuleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PointRedemption")
                        .HasColumnType("float");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LoyaltyPointRuleId");

                    b.HasIndex("StoreId");

                    b.ToTable("pointrulestores");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.LoyaltyPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Point")
                        .HasColumnType("float");

                    b.Property<Guid?>("PointType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalletId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("loyaltypoints");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.LoyaltyPointType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Decs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StandardType")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("loyaltypointtypes");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AcceptToBeContactedViaMobileEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("AcceptToBeContactedViaMobilePhone")
                        .HasColumnType("bit");

                    b.Property<bool>("AcceptToReceiveLoyaltyInformation")
                        .HasColumnType("bit");

                    b.Property<bool>("AcceptToReceiveMarketing")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HomeAddress")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MemberCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotAcceptAnyContact")
                        .HasColumnType("bit");

                    b.Property<int?>("OccupationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RegisterEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WeddingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("YOB")
                        .HasColumnType("int");

                    b.Property<string>("ZaloId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("HomeAddress");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("RegisterEmployee");

                    b.HasIndex("StoreId");

                    b.ToTable("members");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Conditional")
                        .HasColumnType("bit");

                    b.Property<string>("MemberGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("membergroups");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberGroupLink", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId", "MemberGroupId");

                    b.HasIndex("MemberGroupId");

                    b.ToTable("membergrouplinks");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberGroupTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MemberGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MemberTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberGroupId");

                    b.HasIndex("MemberTagId");

                    b.ToTable("membergrouptags");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberLifeCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<double>("LastRegisterMonthDuration")
                        .HasColumnType("float");

                    b.Property<int>("Lifecycle")
                        .HasColumnType("int");

                    b.Property<string>("MemberLifeCycleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalTransaction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("memberlifecycles");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberLifeCycleLink", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MemberLifeCycleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId", "MemberLifeCycleId");

                    b.HasIndex("MemberLifeCycleId");

                    b.ToTable("memberlifecyclelinks");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberLoyaltyTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Point")
                        .HasColumnType("float");

                    b.Property<int?>("PointTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("RefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TransactionType")
                        .HasColumnType("bit");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CouponId");

                    b.HasIndex("PointTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("WalletId");

                    b.ToTable("memberloyaltytransactions");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberProductQrCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProductId");

                    b.ToTable("memberproductqrcodes");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Conditional")
                        .HasColumnType("bit");

                    b.Property<string>("MemberSegmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("membersegments");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberSegmentLink", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberSegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId", "MemberSegmentId");

                    b.HasIndex("MemberSegmentId");

                    b.ToTable("membersegmentlinks");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagCagetoryId")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TagType")
                        .HasColumnType("bit");

                    b.Property<int>("TotalMember")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagCagetoryId");

                    b.ToTable("membertags");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberTagCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("membertagcategories");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberTagValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DataType")
                        .HasColumnType("int");

                    b.Property<Guid>("MemberTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TagKeyId")
                        .HasColumnType("int");

                    b.Property<string>("Values")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberTagId");

                    b.HasIndex("TagKeyId");

                    b.ToTable("membertagvalues");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberTagging", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId", "MemberTagId");

                    b.HasIndex("MemberTagId");

                    b.ToTable("membertaggings");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ActiveEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Point")
                        .HasColumnType("float");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("memberwallets");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.PreferredBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActiveEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("MemberId");

                    b.ToTable("preferredbrand");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.PreferredProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActiveEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProductID");

                    b.ToTable("preferredproduct");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.TagKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DataFormat")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TagGroup")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tagkeys");
                });

            modelBuilder.Entity("Ats.Domain.Organization.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("Ats.Domain.Organization.Models.Lender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("lenders");
                });

            modelBuilder.Entity("Ats.Domain.Organization.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("Ats.Domain.Organization.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("warehouses");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowEarnPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRedeem")
                        .HasColumnType("bit");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<double>("PurchasedPrice")
                        .HasColumnType("float");

                    b.Property<double>("RetailPrice")
                        .HasColumnType("float");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPropertyId");

                    b.ToTable("productattributes");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("productcategories");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.ProductCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EffectiveDateBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("productcollections");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.ProductCollectionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ProductCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCollectionId");

                    b.HasIndex("ProductId");

                    b.ToTable("productcollectionitems");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.ProductOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Receiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProductItemId");

                    b.ToTable("productorders");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.ProductProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("productproperties");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.PurchasedTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MemberReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PurchasedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("MemberId");

                    b.HasIndex("StoreId");

                    b.ToTable("purchasedtransactions");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ActiveEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("stores");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("units");
                });

            modelBuilder.Entity("Ats.Domain.Voucher.Models.MemberVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EarningRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PointRedemption")
                        .HasColumnType("float");

                    b.Property<string>("RedeemedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RedeemedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("VoucherId");

                    b.ToTable("membervouchers");
                });

            modelBuilder.Entity("Ats.Domain.Voucher.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AfterEffectiveDay")
                        .HasColumnType("int");

                    b.Property<int>("AfterReceptionDay")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("AvailableStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EffectiveDateBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<double>("FaceValue")
                        .HasColumnType("float");

                    b.Property<int>("MinimumPurchase")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Template")
                        .HasColumnType("int");

                    b.Property<string>("TemplateBanner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermAndConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ValidityPeriodType")
                        .HasColumnType("bit");

                    b.Property<int?>("VoucherCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VoucherType")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("VoucherCategoryId");

                    b.ToTable("vouchers");
                });

            modelBuilder.Entity("Ats.Domain.Voucher.Models.VoucherCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AddedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("vouchercategories");
                });

            modelBuilder.Entity("Ats.Domain.Accounts.Models.Profile", b =>
                {
                    b.HasOne("Ats.Domain.Address.Models.Address", "AdditionalAddress")
                        .WithMany()
                        .HasForeignKey("AdditionalAddressId");

                    b.HasOne("Ats.Domain.Address.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("Ats.Domain.Accounts.Models.Team", b =>
                {
                    b.HasOne("Ats.Domain.Organization.Models.Client", "Client")
                        .WithMany("Teams")
                        .HasForeignKey("ClientId");

                    b.HasOne("Ats.Domain.Organization.Models.Warehouse", null)
                        .WithMany("Teams")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Ats.Domain.Accounts.Models.TeamUser", b =>
                {
                    b.HasOne("Ats.Domain.Accounts.Models.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Accounts.Models.Transaction", b =>
                {
                    b.HasOne("Ats.Domain.Accounts.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Accounts.Models.Wallet", b =>
                {
                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Address.Models.Address", b =>
                {
                    b.HasOne("Ats.Domain.Address.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Ats.Domain.Address.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Ats.Domain.Address.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("Ats.Domain.Campaign.Models.Campaign", b =>
                {
                    b.HasOne("Ats.Domain.Channel.Models.MemberChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("Ats.Domain.Coupon.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId");
                });

            modelBuilder.Entity("Ats.Domain.Coupon.Models.Coupon", b =>
                {
                    b.HasOne("Ats.Domain.Channel.Models.MemberChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("Ats.Domain.Coupon.Models.CouponCategory", "CouponCategory")
                        .WithMany()
                        .HasForeignKey("CouponCategoryId");

                    b.HasOne("Ats.Domain.Store.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Ats.Domain.Coupon.Models.CouponRedemption", b =>
                {
                    b.HasOne("Ats.Domain.Channel.Models.MemberChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("Ats.Domain.Coupon.Models.MemberCoupon", "MemberCoupon")
                        .WithMany()
                        .HasForeignKey("MemberCouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Store.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Ats.Domain.Coupon.Models.MemberCoupon", b =>
                {
                    b.HasOne("Ats.Domain.Coupon.Models.Coupon", "Coupon")
                        .WithMany("MemberCoupons")
                        .HasForeignKey("CouponId");

                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("MemberCoupons")
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("Ats.Domain.Departments.Models.Department", b =>
                {
                    b.HasOne("Ats.Domain.Identity.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Departments.Models.DepartmentUser", b =>
                {
                    b.HasOne("Ats.Domain.Departments.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Gift.Models.Gift", b =>
                {
                    b.HasOne("Ats.Domain.Channel.Models.MemberChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("Ats.Domain.Gift.Models.GiftCategory", "GiftCategory")
                        .WithMany()
                        .HasForeignKey("GiftCategoryId");
                });

            modelBuilder.Entity("Ats.Domain.Gift.Models.MemberGift", b =>
                {
                    b.HasOne("Ats.Domain.Gift.Models.Gift", "Gift")
                        .WithMany()
                        .HasForeignKey("GiftId");

                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("MemberGifts")
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.GroupRole", b =>
                {
                    b.HasOne("Ats.Domain.Identity.Models.Group", "Group")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Identity.Models.Role", "Role")
                        .WithMany("GroupRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.RoleClaim", b =>
                {
                    b.HasOne("Ats.Domain.Identity.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.UserClaim", b =>
                {
                    b.HasOne("Ats.Domain.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.UserGroup", b =>
                {
                    b.HasOne("Ats.Domain.Identity.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.UserLogin", b =>
                {
                    b.HasOne("Ats.Domain.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.UserRole", b =>
                {
                    b.HasOne("Ats.Domain.Identity.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Identity.Models.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Ats.Domain.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Identity.Models.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Ats.Domain.Identity.Models.UserToken", b =>
                {
                    b.HasOne("Ats.Domain.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.Comment", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.Borrower", "Borrower")
                        .WithMany()
                        .HasForeignKey("BorrowerId");

                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("Comments")
                        .HasForeignKey("LeadId");

                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.Debt", b =>
                {
                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("Debts")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Organization.Models.Organization", "Organization")
                        .WithMany("Debts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.Document", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.Borrower", "Borrower")
                        .WithMany("Documents")
                        .HasForeignKey("BorrowerId");

                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("Documents")
                        .HasForeignKey("LeadId");

                    b.HasOne("Ats.Domain.Loan.Models.Loan", null)
                        .WithMany("Documents")
                        .HasForeignKey("LoanId");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.Income", b =>
                {
                    b.HasOne("Ats.Domain.Account.Models.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("Incomes")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Organization.Models.Organization", "Organization")
                        .WithMany("Incomes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.Lead", b =>
                {
                    b.HasOne("Ats.Domain.Lead.Models.IncomeAmount", "IncomeAmount")
                        .WithMany()
                        .HasForeignKey("IncomeAmountId");

                    b.HasOne("Ats.Domain.Lead.Models.IncomeStream", "IncomeStream")
                        .WithMany()
                        .HasForeignKey("IncomeStreamId");

                    b.HasOne("Ats.Domain.Account.Models.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId");

                    b.HasOne("Ats.Domain.Lead.Models.LoanPackage", "LoanProduct")
                        .WithMany()
                        .HasForeignKey("LoanProductId");

                    b.HasOne("Ats.Domain.Account.Models.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId");

                    b.HasOne("Ats.Domain.Organization.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrgId");

                    b.HasOne("Ats.Domain.Lead.Models.OriginalFileAddition", "OriginalAdditionFile")
                        .WithMany()
                        .HasForeignKey("OriginalFileAdditionId");

                    b.HasOne("Ats.Domain.Lead.Models.OriginalFile", "OriginalFile")
                        .WithMany()
                        .HasForeignKey("OriginalFileId");

                    b.HasOne("Ats.Domain.Accounts.Models.Profile", "Profile")
                        .WithOne("Lead")
                        .HasForeignKey("Ats.Domain.Lead.Models.Lead", "ProfileId");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadAccessLevelHistory", b =>
                {
                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("LeadAccessLevelHistories")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadExchangeRequest", b =>
                {
                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("LeadExchangeRequests")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadLevelHistory", b =>
                {
                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("LeadLevelHistories")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadStatusHistory", b =>
                {
                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("LeadStatusHistories")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadTeam", b =>
                {
                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("LeadTeams")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Accounts.Models.Team", "Team")
                        .WithMany("LeadTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LeadUser", b =>
                {
                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("LeadUsers")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LoanApplication", b =>
                {
                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("LoanApplications")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LoanBook", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.Borrower", "Borrower")
                        .WithMany()
                        .HasForeignKey("BorrowerId");

                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("LoanBooks")
                        .HasForeignKey("LeadId");

                    b.HasOne("Ats.Domain.Lead.Models.LoanPackage", "LoanProduct")
                        .WithMany("LoanBooks")
                        .HasForeignKey("LoanProductId");

                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Ats.Domain.Lead.Models.LoanNote", b =>
                {
                    b.HasOne("Ats.Domain.Lead.Models.Lead", "Lead")
                        .WithMany("LoanNotes")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.Asset", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("Ats.Domain.Loan.Models.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanId");

                    b.HasOne("Ats.Domain.Organization.Models.Warehouse", "Warehouse")
                        .WithMany("Assets")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.AssetAttribute", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.Asset", "Asset")
                        .WithMany("AssetAttributes")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Loan.Models.AssetProperty", "AssetProperty")
                        .WithMany()
                        .HasForeignKey("AssetPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.AssetLoan", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Ats.Domain.Loan.Models.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanId");

                    b.HasOne("Ats.Domain.Organization.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.AssetProperty", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.AssetType", "AssetType")
                        .WithMany("AssetProperties")
                        .HasForeignKey("AssetTypeId");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.Borrower", b =>
                {
                    b.HasOne("Ats.Domain.Account.Models.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId");

                    b.HasOne("Ats.Domain.Lead.Models.LoanPackage", "LoanProduct")
                        .WithMany()
                        .HasForeignKey("LoanProductId");

                    b.HasOne("Ats.Domain.Account.Models.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId");

                    b.HasOne("Ats.Domain.Organization.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrgId");

                    b.HasOne("Ats.Domain.Lead.Models.OriginalFileAddition", "OriginalAdditionFile")
                        .WithMany()
                        .HasForeignKey("OriginalFileAdditionId");

                    b.HasOne("Ats.Domain.Lead.Models.OriginalFile", "OriginalFile")
                        .WithMany()
                        .HasForeignKey("OriginalFileId");

                    b.HasOne("Ats.Domain.Accounts.Models.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.BorrowerAccessLevelHistory", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.Borrower", "Borrower")
                        .WithMany()
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.BorrowerLevelHistory", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.Borrower", "Borrower")
                        .WithMany()
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.BorrowerStatusHistory", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.Borrower", "Borrower")
                        .WithMany()
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.Loan", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.Borrower", "Borrower")
                        .WithMany()
                        .HasForeignKey("BorrowerId");

                    b.HasOne("Ats.Domain.Organization.Models.Lender", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId");

                    b.HasOne("Ats.Domain.Loan.Models.LoanProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.LoanProduct", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.LoanProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.LoanProductAttribute", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.LoanProduct", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Loan.Models.LoanProductProperty", "ProductProperty")
                        .WithMany()
                        .HasForeignKey("ProductPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Loan.Models.LoanProductProperty", b =>
                {
                    b.HasOne("Ats.Domain.Loan.Models.LoanProductCategory", "ProductCategory")
                        .WithMany("ProductProperties")
                        .HasForeignKey("ProductCategoryId");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.MemberLoyaltyTier", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("MemberLoyaltyTiers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Loyalty.Models.LoyaltyTier", "LoyaltyTier")
                        .WithMany("MemberLoyalties")
                        .HasForeignKey("Tier");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.PointRuleBrand", b =>
                {
                    b.HasOne("Ats.Domain.Brand.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Ats.Domain.Loyalty.Models.LoyaltyPointRule", "LoyaltyPointRule")
                        .WithMany("PointRuleBrands")
                        .HasForeignKey("LoyaltyPointRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.PointRuleCategory", b =>
                {
                    b.HasOne("Ats.Domain.Loyalty.Models.LoyaltyPointRule", "LoyaltyPointRule")
                        .WithMany("PointRuleCategories")
                        .HasForeignKey("LoyaltyPointRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Store.Models.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCateId");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.PointRuleChannel", b =>
                {
                    b.HasOne("Ats.Domain.Channel.Models.MemberChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("Ats.Domain.Loyalty.Models.LoyaltyPointRule", "LoyaltyPointRule")
                        .WithMany("PointRuleChannels")
                        .HasForeignKey("LoyaltyPointRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.PointRuleProduct", b =>
                {
                    b.HasOne("Ats.Domain.Loyalty.Models.LoyaltyPointRule", "LoyaltyPointRule")
                        .WithMany("PointRuleProducts")
                        .HasForeignKey("LoyaltyPointRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Store.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Ats.Domain.Loyalty.Models.PointRuleStore", b =>
                {
                    b.HasOne("Ats.Domain.Loyalty.Models.LoyaltyPointRule", "LoyaltyPointRule")
                        .WithMany("PointRuleStores")
                        .HasForeignKey("LoyaltyPointRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Store.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.Member", b =>
                {
                    b.HasOne("Ats.Domain.Channel.Models.MemberChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("Ats.Domain.Address.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("HomeAddress");

                    b.HasOne("Ats.Domain.Account.Models.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId");

                    b.HasOne("Ats.Domain.Account.Models.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId");

                    b.HasOne("Ats.Domain.Identity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("RegisterEmployee");

                    b.HasOne("Ats.Domain.Store.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberGroupLink", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.MemberGroup", "MemberGroup")
                        .WithMany("MemberGroupLinks")
                        .HasForeignKey("MemberGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("MemberGroupLinks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberGroupTag", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.MemberGroup", "MemberGroup")
                        .WithMany("MemberGroupTags")
                        .HasForeignKey("MemberGroupId");

                    b.HasOne("Ats.Domain.Member.Models.MemberTag", "MemberTag")
                        .WithMany()
                        .HasForeignKey("MemberTagId");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberLifeCycleLink", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("MemberLifeCycleLinks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Member.Models.MemberLifeCycle", "MemberLifeCycle")
                        .WithMany("MemberLifeCycleLinks")
                        .HasForeignKey("MemberLifeCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberLoyaltyTransaction", b =>
                {
                    b.HasOne("Ats.Domain.Campaign.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId");

                    b.HasOne("Ats.Domain.Channel.Models.MemberChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("Ats.Domain.Coupon.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId");

                    b.HasOne("Ats.Domain.Member.Models.LoyaltyPointType", "PointType")
                        .WithMany()
                        .HasForeignKey("PointTypeId");

                    b.HasOne("Ats.Domain.Store.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("Ats.Domain.Member.Models.MemberWallet", "MemberWallet")
                        .WithMany("MemberLoyaltyTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberProductQrCode", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.HasOne("Ats.Domain.Store.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberSegmentLink", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("MemberSegmentLinks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Member.Models.MemberSegment", "MemberSegment")
                        .WithMany("MemberSegmentLinks")
                        .HasForeignKey("MemberSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberTag", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.MemberTagCategory", "MemberTagCategory")
                        .WithMany()
                        .HasForeignKey("TagCagetoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberTagValue", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.MemberTag", "MemberTag")
                        .WithMany("MemberTagValues")
                        .HasForeignKey("MemberTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Member.Models.TagKey", "TagKey")
                        .WithMany()
                        .HasForeignKey("TagKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberTagging", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("Tags")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Member.Models.MemberTag", "MemberTag")
                        .WithMany("MemberTaggings")
                        .HasForeignKey("MemberTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.MemberWallet", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("MemberWallets")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.PreferredBrand", b =>
                {
                    b.HasOne("Ats.Domain.Brand.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("PreferredBrands")
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("Ats.Domain.Member.Models.PreferredProduct", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("PreferredProducts")
                        .HasForeignKey("MemberId");

                    b.HasOne("Ats.Domain.Store.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("Ats.Domain.Organization.Models.Warehouse", b =>
                {
                    b.HasOne("Ats.Domain.Organization.Models.Organization", "Organization")
                        .WithMany("Warehouses")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.Product", b =>
                {
                    b.HasOne("Ats.Domain.Brand.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Ats.Domain.Store.Models.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("Ats.Domain.Store.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.ProductAttribute", b =>
                {
                    b.HasOne("Ats.Domain.Store.Models.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Store.Models.ProductProperty", "ProductProperty")
                        .WithMany()
                        .HasForeignKey("ProductPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.ProductCollectionItem", b =>
                {
                    b.HasOne("Ats.Domain.Store.Models.ProductCollection", "ProductCollection")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductCollectionId");

                    b.HasOne("Ats.Domain.Store.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.ProductOrder", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ats.Domain.Store.Models.ProductCollectionItem", "ProductItem")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.ProductProperty", b =>
                {
                    b.HasOne("Ats.Domain.Store.Models.ProductCategory", "ProductCategory")
                        .WithMany("ProductProperties")
                        .HasForeignKey("ProductCategoryId");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.PurchasedTransaction", b =>
                {
                    b.HasOne("Ats.Domain.Channel.Models.MemberChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("PurchasedTransactions")
                        .HasForeignKey("MemberId");

                    b.HasOne("Ats.Domain.Store.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Ats.Domain.Store.Models.Store", b =>
                {
                    b.HasOne("Ats.Domain.Accounts.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Ats.Domain.Voucher.Models.MemberVoucher", b =>
                {
                    b.HasOne("Ats.Domain.Member.Models.Member", "Member")
                        .WithMany("MemberVouchers")
                        .HasForeignKey("MemberId");

                    b.HasOne("Ats.Domain.Voucher.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");
                });

            modelBuilder.Entity("Ats.Domain.Voucher.Models.Voucher", b =>
                {
                    b.HasOne("Ats.Domain.Channel.Models.MemberChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("Ats.Domain.Voucher.Models.VoucherCategory", "VoucherCategory")
                        .WithMany()
                        .HasForeignKey("VoucherCategoryId");
                });
#pragma warning restore 612, 618
        }
    }
}
